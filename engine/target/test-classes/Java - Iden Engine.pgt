##LANGUAGE 'Java'
##TEMPLATE-NAME 'Program and rule handler shell'
##ENGINE-NAME 'Iden Java Engine'
##SYSTEM-VERSION '5.0'
##AUTHOR 'Ralph Iden' 
##FILE-EXTENSION 'java'
##NOTES
This template creates a skeleton program for Ralph Iden's Java GOLD Parser Engine.
##END-NOTES
##ID-CASE UPPERCASE
##ID-SEPARATOR '_'

// Cut and paste the following Rule Handler blocks into individual Java files.

##PRODUCTIONS
//=========================================================================
//RULE HANDLER CLASS BEGINS ===============================================
//=========================================================================

import com.creativewidgetworks.goldparser.engine.ParserException;
import com.creativewidgetworks.goldparser.engine.Reduction;
import com.creativewidgetworks.goldparser.parser.GOLDParser;
import com.creativewidgetworks.goldparser.parser.ProcessRule;

// Note: More than one rule can be mapped per class. Simply append
// a comma to each quoted production description except for the last.
@ProcessRule(rule={
    "%Description%"    
})

/**
 * Rule handler for the %ID% rule.
 */
public class RuleHandler%Value% extends Reduction {
    private GOLDParser theParser;

    public RuleHandler%Value%(GOLDParser parser) {
        theParser = parser;  // Save so execute() has access.
        Reduction reduction = parser.getCurrentReduction();
        if (reduction != null) {
            // Example block that ensures at least 1 parameter is provided, but not more than 2.
            if (reduction.size() > 0 && reduction.size() < 3) { 
                // Insert your code here
            } else {
                parser.raiseParserException("Wrong number of parameters: expected 1..2, but got " + reduction.size() + ".");
            }
        } else {
            parser.raiseParserException(getClass().getSimpleName() + " expected to find a current reduction object.");
        }          
    }

    @Override
    public void execute() throws ParserException {
        // Insert your code here
    }
}

//=========================================================================
//RULE HANDLER CLASS ENDS =================================================
//=========================================================================

##END-PRODUCTIONS


//=========================================================================
// MAIN PROGRAM SHELL BEGINS ==============================================
//=========================================================================

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;

import com.creativewidgetworks.goldparser.engine.ParserException;
import com.creativewidgetworks.goldparser.parser.GOLDParser;

/**
##PARAMETERS
 * An interpreter for the %Name% language. Source files can be executed and parse
 * trees can be generated from the input stream.
 */
public class %Name% {
##END-PARAMETERS
    
    /**
##PARAMETERS
     * Executes a program written in %Name%.
##END-PARAMETERS
     * @param sourceCode to interpret
     * @param wantTree true if the parse tree should be generated
     * @return parse tree if generate parse tree open is set
     */
    public String executeProgram(String sourceCode, boolean wantTree) throws IOException {
        // Use the compiled grammar file inside the jar
        GOLDParser parser = new GOLDParser(
##PARAMETERS
            new FileInputStream("%Name%.egt"),             // compiled grammar table
            "%Name%",                                      // rule handler package (fully qualified package)
##END-PARAMETERS
            true);                                         // trim reductions
        
        // Controls whether or not a parse tree is returned or the program executed.
        parser.setGenerateTree(wantTree);
        
        String tree = null;
        try {
            // Parse the source statements to see if it is syntactically correct
            boolean parsedWithoutError = parser.parseSourceStatements(sourceCode);

            // Holds the parse tree if setGenerateTree(true) was called
            tree = parser.getParseTree();
            
            // Either execute the code or print any error message
            if (parsedWithoutError) {
                parser.getCurrentReduction().execute();
            } else {
                System.out.println(parser.getErrorMessage());
            }
        } catch (ParserException e) {
            System.out.println(e.getMessage());
            e.printStackTrace();
        }

        return tree;
    }

    /*----------------------------------------------------------------------------*/
    
    /**
     * Load a source file to be interpreted by the engine.  
     * @param filename of a source file
     * @return source code to be interpreted
     * @throws IOException 
     */
    public String loadSourceFile(String filename) throws IOException {
        File file = new File(filename);
        FileInputStream fis = new FileInputStream(file);
        byte[] buf = new byte[(int)file.length()];
        fis.read(buf);
        fis.close();
        return new String(buf);
    }
   
    /*----------------------------------------------------------------------------*/
    
    public static void main(String[] args) throws Exception {
        if (args.length > 0) {
##PARAMETERS
            %Name% parser = new %Name%();
##END-PARAMETERS
            String source = parser.loadSourceFile(args[0]);
            boolean wantTree = args.length > 1 && args[1].equalsIgnoreCase("-tree");
            String tree = parser.executeProgram(source, wantTree);
            if (wantTree) {
                System.out.println(tree);
            }
        } else {
##PARAMETERS        
            System.out.println("Usage: java -cp .;./goldengine.jar %Name% <sourcefile> [-tree]");
##END-PARAMETERS
        }
    }
}
