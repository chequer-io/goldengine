"Name"     = 'py'
"Author"   = 'Ralph Iden'
"Version"  = '1.0'
"About"    = 'Sample grammar with blocks represented by indentation'

"Case Sensitive" = False 

"Start Symbol" = <Statements>

! -------------------------------------------------
! Character Sets
! -------------------------------------------------

{String Ch 1} = {Printable} - ['']
{String Ch 2} = {Printable} - ["]

! -------------------------------------------------
! Terminals
! -------------------------------------------------

Identifier    = {Letter}{AlphaNumeric}*
              
! String allows either single or double quotes
StringLiteral = ''   {String Ch 1}* ''
              | '"'  {String Ch 2}* '"'

NumberLiteral = {Digit}+('.'{Digit}+)?

IndentIncrease @= { Source = Virtual }
IndentDecrease @= { Source = Virtual }


! -------------------------------------------------
! Rules
! -------------------------------------------------

<Statements>       ::= <StatementOrBlock> <Statements>
                     | <StatementOrBlock> 

<StatementOrBlock> ::= <Statement>
                     | IndentIncrease <Statements> IndentDecrease 

<Statement>        ::= print <Expression> 
                     | if <Expression> ':' <StatementOrBlock>
                     | else ':' <StatementOrBlock>
           
<Expression>       ::= <Expression> '>'  <Add Exp> 
                     | <Expression> '<'  <Add Exp> 
                     | <Expression> '<=' <Add Exp> 
                     | <Expression> '>=' <Add Exp>
                     | <Expression> '==' <Add Exp>
                     | <Expression> '<>' <Add Exp>
                     | <Add Exp> 

<Add Exp>          ::= <Add Exp> '+' <Mult Exp>
                     | <Add Exp> '-' <Mult Exp>
                     | <Mult Exp> 

<Mult Exp>         ::= <Mult Exp> '*' <Negate Exp> 
                     | <Mult Exp> '/' <Negate Exp> 
                     | <Negate Exp> 

<Negate Exp>       ::= '-' <Value> 
                     | <Value> 

<Value>            ::= Identifier
                     | StringLiteral
                     | NumberLiteral                
                     | '(' <Expression> ')'
